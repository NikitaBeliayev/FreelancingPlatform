// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryObjective", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ObjectivesId")
                        .HasColumnType("uuid");

                    b.HasKey("CategoriesId", "ObjectivesId");

                    b.HasIndex("ObjectivesId");

                    b.ToTable("CategoryObjective");
                });

            modelBuilder.Entity("Domain.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Domain.CommunicationChannels.CommunicationChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CommunicationChannels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Email"
                        });
                });

            modelBuilder.Entity("Domain.Objectives.Objective", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Attachments")
                        .HasColumnType("bytea");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ObjectiveStatusId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("PaymentId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ObjectiveStatusId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("TypeId");

                    b.ToTable("Objectives");
                });

            modelBuilder.Entity("Domain.Payments.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Domain.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Implementer"
                        });
                });

            modelBuilder.Entity("Domain.Statuses.ObjectiveStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ObjectiveStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Draft"
                        },
                        new
                        {
                            Id = 2,
                            Title = "InProgress"
                        },
                        new
                        {
                            Id = 3,
                            Title = "WaitingForAssignment"
                        },
                        new
                        {
                            Id = 4,
                            Title = "WaitingForApproval"
                        },
                        new
                        {
                            Id = 5,
                            Title = "Done"
                        });
                });

            modelBuilder.Entity("Domain.Types.ObjectiveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Eta")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TypeTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ObjectiveType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration = 8,
                            Eta = new DateTime(2024, 2, 7, 7, 10, 43, 136, DateTimeKind.Local).AddTicks(4936),
                            TypeTitle = "Individual"
                        },
                        new
                        {
                            Id = 2,
                            Duration = 8,
                            Eta = new DateTime(2024, 2, 7, 7, 10, 43, 136, DateTimeKind.Local).AddTicks(5083),
                            TypeTitle = "Group"
                        },
                        new
                        {
                            Id = 3,
                            Duration = 8,
                            Eta = new DateTime(2024, 2, 7, 7, 10, 43, 136, DateTimeKind.Local).AddTicks(5088),
                            TypeTitle = "Team"
                        });
                });

            modelBuilder.Entity("Domain.UserCommunicationChannels.UserCommunicationChannel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CommunicationChannelId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ConfirmationToken")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CommunicationChannelId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCommunicationChannels");
                });

            modelBuilder.Entity("Domain.Users.UserDetails.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ObjectiveUser", b =>
                {
                    b.Property<Guid>("ObjectivesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("ObjectivesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ObjectiveUser");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("CategoryObjective", b =>
                {
                    b.HasOne("Domain.Categories.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Objectives.Objective", null)
                        .WithMany()
                        .HasForeignKey("ObjectivesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Objectives.Objective", b =>
                {
                    b.HasOne("Domain.Statuses.ObjectiveStatus", "ObjectiveStatus")
                        .WithMany("Objectives")
                        .HasForeignKey("ObjectiveStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Payments.Payment", "Payment")
                        .WithMany("Objectives")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Types.ObjectiveType", "Type")
                        .WithMany("Objectives")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ObjectiveStatus");

                    b.Navigation("Payment");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.UserCommunicationChannels.UserCommunicationChannel", b =>
                {
                    b.HasOne("Domain.CommunicationChannels.CommunicationChannel", "CommunicationChannel")
                        .WithMany("UserCommunicationChannels")
                        .HasForeignKey("CommunicationChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Users.UserDetails.User", "User")
                        .WithMany("CommunicationChannels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunicationChannel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ObjectiveUser", b =>
                {
                    b.HasOne("Domain.Objectives.Objective", null)
                        .WithMany()
                        .HasForeignKey("ObjectivesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Users.UserDetails.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Domain.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Users.UserDetails.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.CommunicationChannels.CommunicationChannel", b =>
                {
                    b.Navigation("UserCommunicationChannels");
                });

            modelBuilder.Entity("Domain.Payments.Payment", b =>
                {
                    b.Navigation("Objectives");
                });

            modelBuilder.Entity("Domain.Statuses.ObjectiveStatus", b =>
                {
                    b.Navigation("Objectives");
                });

            modelBuilder.Entity("Domain.Types.ObjectiveType", b =>
                {
                    b.Navigation("Objectives");
                });

            modelBuilder.Entity("Domain.Users.UserDetails.User", b =>
                {
                    b.Navigation("CommunicationChannels");
                });
#pragma warning restore 612, 618
        }
    }
}
